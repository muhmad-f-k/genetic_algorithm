'''#Propeller blade angle 𝑎
a="0-45 Grader"

#number of blades 𝑏
b= "he number of blades can be 2, 3, 4, or 5"

#air/fuel ratio 𝛾
y= "Air/fuel ratio must be between 0.55−0.75 due to regulations "

#propeller diameter 𝑑 (mm)
d= "Propeller diameter can be between 1000 mm – 2000 mm"

#and idle valve position 𝜃
valve_position ="Idle valve position can be between 0.5−5.0 "

#Simulations done by top AFC engineers show that the thrust 𝑇\
#  generated by the engine can be expressed using the following formula: 

'''

# GA Operators are 
# 1- Encoding (Methods of representation)
# 2- Selection (How to choose the individuals in the population that will create \
# offspring for the next generatuon)
# 3- Crossover (combine parts of parents chromosomes to create new on)
# 4- Mutation (randomly invert one or more gene in chromosome)

#feature_1 = "0-45"
#feature_2 = "2-5" # den må vær helt tall både i mutat og ev
#feature_3 = "0.55 - 0.75"
#feature_4 = "1000 - 2000"
#feature_5 = "0.5 - 5.0"

#formel skal vær i eva
import random as rnd
mutation_rate = 0.05 # 5%
class Chromosome:
    def __init__(self, feature_1, feature_2, feature_3, feature_4, feature_5):
        self.feature_1 = feature_1 #[0 - 45 grader]
        self.feature_2 = feature_2 #[2-5] Må vær helt tall
        self.feature_3 = feature_3 #[0.55 - 0.75]
        self.feature_4 = feature_4 #[1000 - 2000]
        self.feature_5 = feature_5 #[0.5 - 5.0 grader]
        self.fitness = float('inf')

    def map_to_operator(self):
        pass

    def set_fitness(self, new_fitness):
        self.fitness= new_fitness
    
    def get_fitness(self):
        return self.fitness


    def crossover(self, other):
        pass

    def mutate(self):
        chance = rnd.random()
        if chance < mutation_rate:
            self.feature_1 += rnd.randint(0, 45)
            if self.feature_1 > 45:
                self.feature_1 = 45
            elif self.feature_1 < 0:
                self.feature_1 = 0
            
            self.feature_2 += rnd.randint(2, 5)
            if self.feature_2 > 5:
                self.feature_2 = 4
            elif self.feature_2 < 2:
                self.feature_2 = 2

            self.feature_3 += rnd.randint(0.55, 0.75)
            if self.feature_3 > 0.75:
                self.feature_3 = 0.75
            elif self.feature_3 < 0.55:
                self.feature_3 = 0.55
            
            self.feature_4 += rnd.randint(1000,2000)
            if self.feature_4 > 2000:
                self.feature_4 = 2000
            elif self.feature_4 < 1000:
                self.feature_4 = 1000
            
            self.feature_5 += rnd.randint(0.5, 5.0)
            if self.feature_5 > 5.0:
                self.feature_5 = 5.0
            elif self.feature_5 < 0.5:
                self.feature_5 = 0.5

